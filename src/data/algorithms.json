[
  {
    "id": 0,
    "name": "quick sort",
    "description": "Quick Sort Description",
    "complexity": {
      "timeAvg": "average",
      "timeWorst": "worst",
      "timeBest": "best",
      "space": "space"
    },
    "implementation": "insert code here"
  },
  {
    "id": 1,
    "name": "merge sort",
    "description": "Merge Sort Description",
    "complexity": {
      "timeAvg": "average",
      "timeWorst": "worse",
      "timeBest": "best",
      "space": "space"
    },
    "implementation": "insert code here"
  },
  {
    "id": 2,
    "name": "bubble sort",
    "description": "Bubble Sort Description",
    "complexity": {
      "timeAvg": "average",
      "timeWorst": "worse",
      "timeBest": "best",
      "space": "space"
    },
    "implementation": "insert code here"
  },
  {
    "id": 3,
    "name": "selection sort",
    "description": "Selection Sort Description",
    "complexity": {
      "timeAvg": "average",
      "timeWorst": "worse",
      "timeBest": "best",
      "space": "space"
    },
    "implementation": "insert code here"
  },
  {
    "id": 4,
    "name": "insertion sort",
    "description": "<p>Insertion sort is a simple sorting algorithm that builds the final sorted array one element at a time by removing it from the input data, finding the location in which it belongs within the sorted segment, and inserting it there. This process repeats until no input elements remain.</p><p>This algorithm is much less efficient on large lists than more advanced algorithms such as quick sort, heap sort, or merge sort. However, it has many advantages. It can be done in-place, so it only requires a constant amount additional memory. It is stable, meaning that will preserve the relative order of elements with equal keys. It is adaptive in the sense that it performs well on data sets that are already substantially sorted. And it is very efficient for small data sets.</p>",
    "complexity": {
      "timeAvg": "O(n<sup>2</sup>)",
      "timeWorst": "O(n<sup>2</sup>)",
      "timeBest": "O(n)",
      "space": "O(1)"
    },
    "implementation": "insert code here"
  }
]
