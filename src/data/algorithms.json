[
  {
    "id": 0,
    "name": "quick sort",
    "description": "<p>Quick sort (or quicksort) is a divide-and-conquer algorithm that works by selecting a \"pivot\" element from the input array and partitioning the other elements into two subarrays, according to whether they are less than or greater than the pivot. Then, the subarrays are recursively sorted using this same procedure. There are several ways that one could choose the pivot element, which can have implications on the complexity and runtime of the algorithm, but the middle element or a randomly chosen element are some of the most common candidates.</p><p>Despite the fact that quick sort's worst-case complexity is O(n<sup>2</sup>), which occurs when the lowest or highest value element is repeatedly chosen as the pivot, this can practically always be avoided by selecting the pivot appropriately, e.g., by picking one at random each time. Since the likelihood of encountering the worst-case can be reduced to an extreme statistical improbablility, and since in practice, quick sort is the fastest sorting algorithm in many situations, it is widely adopted as the algorithm of choice for solving sorting problems. It also requires less space than merge sortâ€”its main competitor. The key disadvantage that quick sort has over merge sort is that most implementations of it are not stable, meaning that the relative order of elements with equal keys is not protected. This too can be overcome, but implementing a stable quick sort comes at the cost of extra space or extra logic.</p>",
    "complexity": {
      "timeAvg": "O(n log n)",
      "timeWorst": "O(n<sup>2</sup>)",
      "timeBest": "O(n log n)",
      "space": "O(log n)"
    },
    "implementation": "<span>const swap = (arr, i, j) => {</span><span>  const temp = arr[i];</span><span>  arr[i] = arr[j];</span><span>  arr[j] = temp;</span><span>};</span><br /><span>const partition = (arr, left, right) => {</span><span>  const pivot = arr[Math.floor(Math.random() * (right - left) + left)];</span><span>  while (left <= right) {</span><span>    while (arr[left] < pivot) {</span><span>      left++;</span><span>    }</span><span>    while (arr[right] > pivot) {</span><span>      right--;</span><span>    }</span><span>    if (left <= right) {</span><span>      swap(arr, left, right);</span><span>      left++;</span><span>      right--;</span><span>    }</span><span>  }</span><span>  return left;</span><span>};</span><br /><span>const quickSort = (arr, left, right) => {</span><span>  if (left === undefined) {</span><span>    left = 0;</span><span>    right = arr.length - 1;</span><span>  }</span><span>  if (left >= right) {</span><span>    return arr;</span><span>  }</span><span>  const pIndex = partition(arr, left, right);</span><span>  quickSort(arr, left, pIndex - 1);</span><span>  quickSort(arr, pIndex, right);</span><span>  return arr;</span><span>};</span>"
  },
  {
    "id": 1,
    "name": "merge sort",
    "description": "<p>Merge sort is an efficient, general-purpose comparison-based sorting algorithm that works by dividing the input list into <em>n</em> sublists of size one, and then repeatedly merging these with their neighbors to produce new sorted sublists <em>log n</em> times until there is only one sublist remaining, i.e., the entire sorted list. It is typically implemented recursively, and it uses the divide-and-conquer strategy of breaking down the problem into similar, smaller-sized subproblems, solving those, and composing their solutions to solve the larger problem.</p><p>Merge sort is a popular choice because it performs much more efficiently than quadratic sorting algorithms for large datasets. For smaller datasets, simpler algorithms perform better, as the overhead of recursively dividing the input and merging isn't worth it. It also has advantages over quick sort in that it is stable, so the relative order of elements with equal keys stays unchanged, and it generally performs fewer comparisons. One drawback of merge sort when compared to quick sort is its higher space requirement. However, in the case of linked lists, merge sort actually has a better space complexity than quick sort, and therefore it is regarded as the best algorithm for these types of inputs. </p>",
    "complexity": {
      "timeAvg": "O(n log n)",
      "timeWorst": "O(n log n)",
      "timeBest": "O(n log n)",
      "space": "O(n)"
    },
    "implementation": "<span>const merge = (arr, leftSub, rightSub) => {</span><span>  let i = 0;</span><span>  let j = 0;</span><span>  let k = 0;</span><span>  while (i < leftSub.length && j < rightSub.length) {</span><span>    if (leftSub[i] <= rightSub[j]) {</span><span>      arr[k] = leftSub[i];</span><span>      i++;</span><span>    } else {</span><span>      arr[k] = rightSub[j];</span><span>      j++;</span><span>    }</span><span>    k++;</span><span>  }</span><span>  while (i < leftSub.length) {</span><span>    arr[k] = leftSub[i];</span><span>    i++;</span><span>    k++;</span><span>  }</span><span>  while (j < rightSub.length) {</span><span>    arr[k] = rightSub[j];</span><span>    j++;</span><span>    k++;</span><span>  }</span><span>  return arr;</span><span>};</span><br /><span>const mergeSort = (arr) => {</span><span>  if (arr.length < 2) {</span><span>    return;</span><span>  }</span><span>  const left = arr.slice(0, arr.length / 2);</span><span>  const right = arr.slice(arr.length / 2);</span><span>  mergeSort(left);</span><span>  mergeSort(right);</span><span>  return merge(arr, left, right);</span><span>};</span>"
  },
  {
    "id": 2,
    "name": "bubble sort",
    "description": "<p>Bubble sort, named after the way that the largest elements bubble up to the top of the list first, is a sorting algorithm that repeatedly steps through the input list, comparing adjacent elements and swapping their values if needed. This process is continued until a pass is made through the list in which no swaps occurred, signalling that everything is sorted.</p><p>Bubble sort's use is primarily as an educational tool. Its main advantages are as follows. It is in-place, meaning that only constant additional memory is needed. It is adaptive, so the time it takes to run this algorithm is greatly reduced on mostly sorted inputs. And it is stable, so that the relative ordering of elements with equal keys is maintained. However, this algorithm performs more poorly than the similar insertion sort, or even selection sort for that matter. </p><p>Sometimes, the terms \"rabbits\" and \"turtles\" are used to refer to the way certain elements behave within the context of bubble sort. Rabbits are the elements that want to move toward the end of the list, and they can do this very quickly because the algorithm goes from left to right. Turtles are the smaller elements that want to move toward the beginning of the list, but they cannot move faster than one step to the left per pass. The slow speed of turtles presents a bottleneck on the speed of bubble sort as a whole, so there are variations like cocktail sort and comb sort which attempt to minimize this imbalance by making turtles faster.</p>",
    "complexity": {
      "timeAvg": "O(n<sup>2</sup>)",
      "timeWorst": "O(n<sup>2</sup>)",
      "timeBest": "O(n)",
      "space": "O(1)"
    },
    "implementation": "<span>const bubbleSort = (arr) => {</span><span>  let swapOccurredThisPass;</span><span>  do {</span><span>    swapOccurredThisPass = false;</span><span>    for (let i = 0; i < arr.length - 1; i++) {</span><span>      if (arr[i] > arr[i + 1]) {</span><span>        const temp = arr[i];</span><span>        arr[i] = arr[i + 1];</span><span>        arr[i + 1] = temp;</span><span>        swapOccurredThisPass = true;</span><span>      }</span><span>    }</span><span>  } while (swapOccurredThisPass === true);</span><span>  return arr;</span><span>};</span>"
  },
  {
    "id": 3,
    "name": "selection sort",
    "description": "<p>Selection sort is a simple in-place sorting algorithm which divides the input array into a sorted subarray and an unsorted subarray. At each iterative step, it sorts the minimum or maximum value in the unsorted array by removing it and placing it in the appropriate position in the sorted array. Then, it repeats this until all elements are sorted.</p><p>This algorithm is very inefficient on large inputs, and it generally performs worse than the similar insertion sort. Its main advantages are that it is an in-place algorithm and therefore only requires constant auxiliary memory, and it is simple to implement and understand. As a result of its small memory requirement, it may also have performance advantages over more complicated algorithms in certain situations where memory is limited.</p>",
    "complexity": {
      "timeAvg": "O(n<sup>2</sup>)",
      "timeWorst": "O(n<sup>2</sup>)",
      "timeBest": "O(n<sup>2</sup>)",
      "space": "O(1)"
    },
    "implementation": "<span>const selectionSort = (arr) => {</span><span>  for (let i = 0; i < arr.length - 1; i++) {</span><span>    let min = arr[i];</span><span>    let minIndex = i;</span><span>    for (let j = i + 1; j < arr.length; j++) {</span><span>      if (arr[j] < min) {</span><span>        min = arr[j];</span><span>        minIndex = j;</span><span>      }</span><span>    }</span><span>    const temp = arr[i];</span><span>    arr[i] = min;</span><span>    arr[minIndex] = temp;</span><span>  }</span><span>  return arr;</span><span>};</span>"
  },
  {
    "id": 4,
    "name": "insertion sort",
    "description": "<p>Insertion sort is a simple sorting algorithm that builds the final sorted array one element at a time by removing it from the input data, finding the location in which it belongs within the sorted segment, and inserting it there. This process repeats until no input elements remain.</p><p>This algorithm is much less efficient on large inputs than more advanced algorithms such as quick sort, heap sort, or merge sort. However, it has many advantages. It can be done in-place, so it only requires a constant amount additional memory. It is stable, meaning that it will preserve the relative order of elements with equal keys. It is adaptive in the sense that it performs well on data sets that are already substantially sorted. And it is very efficient for small data sets.</p>",
    "complexity": {
      "timeAvg": "O(n<sup>2</sup>)",
      "timeWorst": "O(n<sup>2</sup>)",
      "timeBest": "O(n)",
      "space": "O(1)"
    },
    "implementation": "<span>const insertionSort = (arr) => {</span><span>  for (let i = 1; i < arr.length; i++) {</span><span>    let temp = arr[i];</span><span>    let j = i - 1;</span><span>    while (j >= 0 && arr[j] > temp) {</span><span>      arr[j + 1] = arr[j];</span><span>      j = j - 1;</span><span>    }</span><span>    arr[j + 1] = temp;</span><span>  }</span><span>  return arr;</span><span>};</span>"
  }
]
